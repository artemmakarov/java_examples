====================================================================================
Апплет — это специальная программа на Java, предназначенная для передачи по
Интернету и автоматического выполнения в среде, формируемой совместимым с Java
браузером. Апплет загружается по требованию клиентской программы, а для его пере¬
дачи по сети вмешательство пользователя не требуется. Если пользователь щелкает на
ссылке, указывающей на документ, который содержит апплет, последний будет автома¬
тически скопирован и запущен браузером.
Обычно они служат для отображения информации, предоставляемой серверами,
или поддержки ввода данных пользователем. Иногда с их помощью реализуются не¬
сложные функции. Например, калькулятор удобнее разместить в виде апплета на сто¬
роне клиента, чем выполнять вычисления на стороне сервера. Таким образом, апплет
позволяет переносить некоторые функции с сервера на машину клиента.

====================================================================================
В Java идентификатор обозначает имя метода, переменной или элемента, определя¬
емых пользователем. Идентификатор может содержать один или несколько символов.
Имя переменной может начинаться с любой буквы, знака подчеркивания или денеж¬
ной единицы. Далее могут следовать буквы, цифры, знак подчеркивания или денежной
единицы. Знак подчеркивания обычно применяется для того, чтобы сделать имя более
удобным для восприятия, например line_count.
 
=================================================================================
Простые типы данных - примитивы, являются не объектами, а обычными двоичными значениями.

Целочисленные типы :
byte      8             от-128 до 127
short     16            от -32,768 до 32,767
int       32            от -2,147,483,648 до 2,147,483,647
long      64            от -9,223,372,036,854,775,808 до 9,223,372,036,854,775,807

Переменные типа byte очень удобны для обработки исходных двоичных данных, которые могут оказаться несовместимыми с другими встроенными в Java типами данных. Тип short предназначен для хранения небольших целых чисел. Переменные данного типа пригодны для хранения значений, изменяющихся в относительно небольших пределах по сравнению со значениями типа int.

Разрядность данных типа float составляет 32 бита, а разрядность данных типа double — 64 бита. Тип double употребляется намного чаще, чем float, поскольку во всех математических функциях из библиотек классов Java используются значения типа double.

===================================================================================
В Java литералы применяются для представления постоянных значений в форме,
удобной для восприятия.  Литералы часто называют константами.
====================================================================================

Все использовавшиеся до сих пор переменные объявлялись в начале метода main ().
Но в Java можно объявлять переменные в любом кодовом блоке. Как пояснялось в главе 1, кодовый блок начинается с открывающей фигурной скобки и оканчивается закрывающей фигурной скобкой. Блок определяет область действия переменных. Начиная
новый блок, вы всякий раз создаете новую область действия. По существу, область действия определяет доступность объектов из других частей программы и срок их действия.


Если при объявлении переменной осуществляется ее инициализация, то переменная
будет повторно инициализироваться при каждом входе в тот блок, в котором она объ¬
явлена. Переменная, определенная в начале метода, доступна для всего кода этого метода.Следует также иметь в виду, что переменные, созданные в области их действия,
удаляются, как только управление в программе передается за пределы этой области.
Следовательно, после выхода из области действия переменной содержащееся в ней зна¬
чение теряется. В частности, переменные, объявленные в теле метода, не хранят значе¬
ния в промежутках между последовательными вызовами этого метода. Таким образом,
срок действия переменной ограничивается областью ее действия.

Для правил области действия в Java характерна следующая особенность: имя пере¬
менной во вложенном блоке не может совпадать с именем переменной во внешнем бло¬
ке.
==================================================================================
Оператор — это знак, указывающий компилятору на необходимость выполнения определенного математического или логического действия. Операторы в Java делятся на четыре общие категории: арифметические, поразрядные, логические и отношения.

Операторы отношения отличаются от логических операторов тем, что первые определяют отношения между значениями, а вторые связывают вместе логические значения
(true или false), получаемые в результате определения отношений между значениями. Операторы отношения возвращают логическое значение true или false, и поэтому они нередко используются совместно с логическими операторами.

Ниже перечислены операторы отношения.

==      Равно
| =     Неравно
>       Больше
<       Меньше
>=      Больше или равно
<=      Меньше или равно

Далее перечислены логические операторы.

&     И
|     ИЛИ
^     Исключающее ИЛИ
||    Укороченное ИЛИ
&&    Укороченное И
!     НЕ
Результатом выполнения оператора отношения или логического оператора является
логическое значение типа boolean.
Все операторы отношения можно применять к данным числовых типов и типа char. А логические значения типа boolean можно проверить только на равенство или неравенство, поскольку истинные (true) и ложные (false) значения не имеют отношения порядка. Например, выражение true > false не имеет смысла в Java.

В Java предусмотрены также специальные, укороченные варианты логических операторов И и ИЛИ, предназначенные для получения более эффективного кода. Поясним это на следующих примерах логических операций. Если первый операнд логической операции И имеет ложное значение (false), то ее результат будет иметь ложное значение независимо от значения второго операнда. Если же первый операнд логической
операции ИЛИ имеет истинное значение (true), то ее результат будет иметь истинное
значение независимо от значения второго операнда. Благодаря тому что значение вто¬
рого операнда в этих операциях вычислять не нужно, экономится время и повышается
эффективность кода.
Для чтения символа с клавиатуры достаточно вызвать метод System. in. read (), где System, in — объект ввода (с клавиатуры), дополняющий объект вывода System, out. Метод read () ожидает нажатия пользователем клавиш, после чего возвращает результат. Возвращаемый им символ представлен целочисленным значением, и поэтому, прежде чем присвоить его символьной переменной, следует выполнить явное его приведение к типу char. По умолчанию данные, вводимые с консоли, буферизуются построчно.
Под термином буфер здесь подразумевается небольшая область памяти, выделяемая для
хранения символов перед тем, как они будут прочитаны программой.
